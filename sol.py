Result = open('Result.txt', 'w')

def check_safe(lst):
    """Check if any two elements of lst can form a line,
    if so, there will be:
    abs(value2-value1)/(index2-index1)==1
    """
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            if abs((lst[j] - lst[i]) * 1.0 / (j - i)) == 1:
                return False
    return True


def print_solution(lst):
    #Print a solution to stdout
    #The argument lst is a nested list
    for i in range(len(lst)):
        stars = [0] * len(lst)
        stars[lst[i]] = 'Q'
        for j in range(0,8):
            Result.write(str(stars[j])+'  ')
        Result.write('\n')
    Result.write('\n')


def list_mutation(n):
    #Generate all posible layouts of n queens
    if n == 0:
        yield [n]
    else:
        for lst in list_mutation(n - 1):
            for i in range(n):
                print lst
                yield lst[0:n - 1 - i] + [n - 1] + lst[n - 1 - i:n - 1]


def queens(n):
    #Find all solutions of queens.
    #For each layout generated by list_mutation(n), chech
    #if it's safe.
    #The augument n is the number of queens. Certainly it
    #can be altered to meet your own needs.

    for q in list_mutation(n):
        if check_safe(q):
            yield q



N = 8
count = 0
for q in queens(N):
    count += 1
    Result.write('solution: '+str(count)+'\n')
    print_solution(q)
    Result.write('Solution count: '+str(count)+'\n')